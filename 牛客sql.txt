select device_id, gender, age, university from user_profile
select * from user_profile
select distinct university from user_profile

SELECT device_id 
from user_profile 
limit 2

select device_id as user_infos_example 
from user_profile 
limit 2

select device_id, university 
from user_profile 
where university = '北京大学'

select device_id, gender, age, university 
from user_profile 
where age > 24

select device_id, gender, age 
from user_profile 
where age between 20 and 23

SELECT device_id, gender, age, university 
from user_profile 
where university not like '复旦大学'

select device_id, gender, age, university 
from user_profile 
where age is not null

SELECT device_id, gender, age, university, gpa 
from user_profile 
where gpa > 3.5 and gender = 'male'

SELECT device_id, gender, age, university, gpa 
from user_profile 
where university = '北京大学' or gpa > 3.7

select device_id, gender, age, university, gpa 
from user_profile 
where university in ('北京大学', '复旦大学', '山东大学')

select device_id, gender, age, university, gpa 
from user_profile 
where (gpa > 3.5 and university = '山东大学') 
or (gpa > 3.8 and university = '复旦大学')

select device_id, age, university from user_profile where university like '%北京%'

select max(gpa) as gpa
from user_profile
where university='复旦大学';

select gpa
from user_profile
where university='复旦大学'
order by gpa desc limit 1

select 
  count(gender) as male_num,
  round(avg(gpa), 1) as avg_gpa
from user_profile where gender="male";

select 
    gender, university,
    count(device_id) as user_num,
    avg(active_days_within_30) as avg_active_days,
    avg(question_cnt) as avg_question_cnt
from user_profile
group by gender, university

select
    university,
    avg(question_cnt) as avg_question_cnt,
    avg(answer_cnt) as avg_answer_cnt
from user_profile
group by university
having avg_question_cnt<5 or avg_answer_cnt<20

select university,
    avg(question_cnt) as avg_question_cnt
from user_profile
group by university
order by avg_question_cnt

select qpd.device_id, qpd.question_id, qpd.result
from question_practice_detail as qpd
inner join user_profile as up
on up.device_id=qpd.device_id and up.university='浙江大学'

SELECT up.university,
    COUNT(qpd.question_id) / COUNT(DISTINCT(qpd.device_id)) as avg_answer_cnt
FROM user_profile AS up
inner join question_practice_detail AS qpd
ON up.device_id = qpd.device_id
GROUP BY university

SELECT up.university, qd.difficult_level,
    COUNT(qpd.question_id) / COUNT(DISTINCT(qpd.device_id)) AS avg_answer_cnt
FROM user_profile AS up
JOIN question_practice_detail AS qpd
ON up.device_id = qpd.device_id
JOIN question_detail AS qd
on qpd.question_id = qd.question_id
GROUP BY up.university, qd.difficult_level

SELECT up.university, qd.difficult_level, 
    COUNT(qpd.question_id) / COUNT(DISTINCT up.device_id) AS avg_answer_cnt
FROM user_profile AS up
INNER JOIN question_practice_detail AS qpd
    ON up.device_id = qpd.device_id
INNER JOIN question_detail AS qd
    ON qpd.question_id = qd.question_id
WHERE university = '山东大学'
GROUP BY qd.difficult_level



SELECT device_id,gender,age,gpa
FROM user_profile
WHERE university = '山东大学'
UNION ALL
SELECT device_id,gender,age,gpa
FROM user_profile
WHERE gender = 'male'

SELECT
    CASE
    WHEN age < 25 OR age IS NULL THEN '25岁以下'
    WHEN age >= 25 THEN '25岁及以上'
    END AS age_cut,
    COUNT(device_id) AS number
FROM user_profile
GROUP BY age_cut

SELECT device_id, gender,
    CASE
        when age >= 25 then '25岁及以上'
        when age >= 20 then '20-24岁'
        when age < 20 then '20岁以下'
        ELSE '其他'
    END AS age_cut
FROM user_profile

select
    DAY(qpd.date) AS day,
    COUNT(question_id) AS question_cnt
FROM question_practice_detail AS qpd
WHERE YEAR(qpd.date) = 2021 and MONTH(qpd.date) = 8
GROUP BY day

#将给定的表格数据分成三份来看，默认qpd1中的数据为第一天，qpd2中为第二天
#如果qpd1中的日期和qpd2中的日期接得上，说明是连续刷题,前提是同一台设备
#留存率的计算首先要确保是单独、不重复的计数
#每台设备每天来一次可以算起来做分母
#每台设备连续两天都刷题可以算计一次分子
select 
    COUNT(DISTINCT qpd1.device_id, qpd2.device_id, qpd1.date, qpd2.date) 
    / COUNT(DISTINCT qpd3.device_id, qpd3.date)
    AS avg_ret
FROM
    question_practice_detail AS qpd1,
    question_practice_detail AS qpd2,
    question_practice_detail AS qpd3
WHERE
    qpd1.device_id = qpd2.device_id
    and DATE_ADD(qpd1.date, INTERVAL 1 DAY) = qpd2.date

SELECT
    case
        when us.profile like '%,male' then 'male'
        when us.profile like '%,female' then 'female'
    end gender, count(device_id) AS number
from user_submit AS us
GROUP BY gender

SELECT 
    SUBSTRING_INDEX(profile,",",-1) gender,
    COUNT(device_id) AS number
FROM user_submit 
GROUP BY gender;

SELECT
    device_id,
    SUBSTRING_INDEX(blog_url, '/', -1) AS user_name
FROM user_submit

select 
-- 替换法 replace(string, '被替换部分','替换后的结果')
-- device_id, replace(blog_url,'http:/url/','') as user_name
-- 截取法 substr(string, start_point, length*可选参数*)
-- device_id, substr(blog_url,11,length(blog_url)-10) as user_nam
-- 删除法 trim('被删除字段' from 列名)
-- device_id, trim('http:/url/' from blog_url) as user_name
-- 字段切割法 substring_index(string, '切割标志', 位置数（负号：从后面开始）)
device_id, substring_index(blog_url,'/',-1) as user_name
from user_submit;

SELECT a.device_id, a.university, a.gpa
FROM(
    SELECT *,
    RANK() over(PARTITION BY university ORDER BY gpa) AS ranking1,
    DENSE_RANK() over(PARTITION BY university ORDER BY gpa) AS ranking2,
    ROW_NUMBER() over(PARTITION BY university ORDER BY gpa) AS ranking3
    FROM user_profile
) AS a
WHERE a.ranking1=1

select up.device_id, '复旦大学',
    count(question_id) as question_cnt,
    sum(if(qpd.result='right', 1, 0)) as right_question_cnt
from user_profile as up
left join question_practice_detail as qpd
    on qpd.device_id = up.device_id and month(qpd.date) = 8
where up.university = '复旦大学'
group by up.device_id

SELECT difficult_level,
    AVG(if(result = 'right', 1, 0)) AS correct_rate1,
    SUM(if(result = 'right', 1, 0)) / COUNT(qpd.question_id) AS correct_rate2,
    COUNT(if(result = 'right', 1, null)) / COUNT(qpd.question_id) AS correct_rate3
FROM
    user_profile AS up
    INNER JOIN question_practice_detail AS qpd
    ON up.device_id = qpd.device_id
    INNER JOIN question_detail AS qd
    ON qpd.question_id = qd.question_id
WHERE university = '浙江大学'
GROUP BY difficult_level
ORDER BY correct_rate1


SELECT device_id, gpa, age
FROM user_profile
ORDER BY gpa, age

SELECT device_id, gpa, age
FROM user_profile
ORDER BY gpa DESC, age DESC

SELECT
    COUNT(DISTINCT alias.device_id) AS did_cnt,
    COUNT(alias.question_id) AS question_cnt
FROM(
    SELECT device_id, question_id, date
    FROM question_practice_detail
    WHERE MONTH(date) = 8 and YEAR(date) = 2021
) AS alias

SELECT
    COUNT(DISTINCT device_id) AS did_cnt,
    COUNT(question_id) AS question_cnt
FROM question_practice_detail
WHERE date LIKE '2021-08%'

insert into exam_record
VALUES 
(null,1001,9001,'2021-09-01 22:11:12','2021-09-01 22:11:12' +INTERVAL 50 minute,90),
(null,1002,9002,'2021-09-04 07:01:02',null,NULL);

INSERT INTO exam_record_before_2021(uid, exam_id, start_time, submit_time, score)
SELECT uid, exam_id, start_time, submit_time, score
FROM exam_record
WHERE YEAR(submit_time) < '2021';

REPLACE INTO examination_info
VALUES(NULL,9003,'SQL','hard',90,'2021-01-01 00:00:00');

DELETE FROM examination_info
WHERE exam_id=9003;
INSERT INTO examination_info
VALUES(NULL,9003, 'SQL','hard', 90, '2021-01-01 00:00:00')

UPDATE examination_info
SET tag = "Python"
WHERE tag = "PYTHON";

UPDATE examination_info
SET tag = REPLACE(tag, "PYTHON", "Python")
WHERE tag = "PYTHON";

UPDATE exam_record
SET submit_time='2099-01-01 00:00:00', score=0
WHERE start_time < '2021-09-01 00:00:00' AND score IS NULL;

SELECT er.uid, ei.exam_id, ei.tag, ei.difficulty, er.score,
    RANK() OVER(
        PARTITION BY er.exam_id
        ORDER BY er.score
    ) AS ranking
FROM exam_record AS er
LEFT JOIN examination_info AS ei
    ON ei.exam_id = er.exam_id
WHERE ei.tag = 'SQL'
    AND ei.difficulty = 'hard'
    AND er.score IS NOT NULL

SELECT tag, difficulty, 
    ROUND((SUM(er.score) - MAX(er.score) - MIN(er.score)) / (COUNT(*) - 2), 1) AS clip_avg_score
FROM exam_record AS er
LEFT JOIN examination_info AS ei
    ON ei.exam_id = er.exam_id
WHERE ei.tag = 'SQL'
    AND ei.difficulty = 'hard'
    AND er.score IS NOT NULL

SELECT
    COUNT(exam_id) AS total_pv,
    COUNT(if(score IS NOT NULL, 1, NULL)) AS complete_pv,
    COUNT(DISTINCT if(score IS NOT NULL, exam_id, NULL)) AS complete_exam_cnt
FROM exam_record

SELECT 
    DATE_FORMAT(submit_time, '%Y%m') AS month,
    ROUND((COUNT(DISTINCT uid, DATE_FORMAT(submit_time, '%d')) / COUNT(DISTINCT uid)), 2) AS avg_active_days,
    COUNT(DISTINCT uid) AS mau
FROM exam_record
WHERE DATE_FORMAT(submit_time, '%Y') = 2021
GROUP BY month

SELECT 
    IFNULL(DATE_FORMAT(submit_time, '%Y%m'), '2021汇总') AS submit_month,
    COUNT(question_id) AS month_q_cnt,
    ROUND((COUNT(question_id) / MAX(DAY(LAST_DAY(submit_time)))), 3) AS avg_day_q_cnt
FROM practice_record
WHERE DATE_FORMAT(submit_time, '%Y') = '2021'
GROUP BY submit_month
WITH ROLLUP